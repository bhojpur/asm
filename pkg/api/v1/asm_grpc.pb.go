// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AsmServiceClient is the client API for AsmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsmServiceClient interface {
	// StartLocalSidecar starts a Service Sidecar on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the asm/config.yaml
	//   3. all bytes constituting the Sidecar YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalSidecar(ctx context.Context, opts ...grpc.CallOption) (AsmService_StartLocalSidecarClient, error)
	// StartFromPreviousSidecar starts a new Sidecar based on a previous one.
	// If the previous Sidecar does not have the can-replay condition set this call will result in an error.
	StartFromPreviousSidecar(ctx context.Context, in *StartFromPreviousSidecarRequest, opts ...grpc.CallOption) (*StartSidecarResponse, error)
	// StartSidecarRequest starts a new Sidecar based on its specification.
	StartSidecar(ctx context.Context, in *StartSidecarRequest, opts ...grpc.CallOption) (*StartSidecarResponse, error)
	// Searches for Sidecar(s) known to this Sidecar
	ListSidecars(ctx context.Context, in *ListSidecarsRequest, opts ...grpc.CallOption) (*ListSidecarsResponse, error)
	// Subscribe listens to new Sidecar(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (AsmService_SubscribeClient, error)
	// GetSidecar retrieves details of a single Sidecar
	GetSidecar(ctx context.Context, in *GetSidecarRequest, opts ...grpc.CallOption) (*GetSidecarResponse, error)
	// Listen listens to Sidecar updates and log output of a running Sidecar
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (AsmService_ListenClient, error)
	// StopSidecar stops a currently running Sidecar
	StopSidecar(ctx context.Context, in *StopSidecarRequest, opts ...grpc.CallOption) (*StopSidecarResponse, error)
}

type asmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsmServiceClient(cc grpc.ClientConnInterface) AsmServiceClient {
	return &asmServiceClient{cc}
}

func (c *asmServiceClient) StartLocalSidecar(ctx context.Context, opts ...grpc.CallOption) (AsmService_StartLocalSidecarClient, error) {
	stream, err := c.cc.NewStream(ctx, &AsmService_ServiceDesc.Streams[0], "/v1.AsmService/StartLocalSidecar", opts...)
	if err != nil {
		return nil, err
	}
	x := &asmServiceStartLocalSidecarClient{stream}
	return x, nil
}

type AsmService_StartLocalSidecarClient interface {
	Send(*StartLocalSidecarRequest) error
	CloseAndRecv() (*StartSidecarResponse, error)
	grpc.ClientStream
}

type asmServiceStartLocalSidecarClient struct {
	grpc.ClientStream
}

func (x *asmServiceStartLocalSidecarClient) Send(m *StartLocalSidecarRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *asmServiceStartLocalSidecarClient) CloseAndRecv() (*StartSidecarResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartSidecarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *asmServiceClient) StartFromPreviousSidecar(ctx context.Context, in *StartFromPreviousSidecarRequest, opts ...grpc.CallOption) (*StartSidecarResponse, error) {
	out := new(StartSidecarResponse)
	err := c.cc.Invoke(ctx, "/v1.AsmService/StartFromPreviousSidecar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) StartSidecar(ctx context.Context, in *StartSidecarRequest, opts ...grpc.CallOption) (*StartSidecarResponse, error) {
	out := new(StartSidecarResponse)
	err := c.cc.Invoke(ctx, "/v1.AsmService/StartSidecar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) ListSidecars(ctx context.Context, in *ListSidecarsRequest, opts ...grpc.CallOption) (*ListSidecarsResponse, error) {
	out := new(ListSidecarsResponse)
	err := c.cc.Invoke(ctx, "/v1.AsmService/ListSidecars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (AsmService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AsmService_ServiceDesc.Streams[1], "/v1.AsmService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &asmServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AsmService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type asmServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *asmServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *asmServiceClient) GetSidecar(ctx context.Context, in *GetSidecarRequest, opts ...grpc.CallOption) (*GetSidecarResponse, error) {
	out := new(GetSidecarResponse)
	err := c.cc.Invoke(ctx, "/v1.AsmService/GetSidecar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asmServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (AsmService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &AsmService_ServiceDesc.Streams[2], "/v1.AsmService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &asmServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AsmService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type asmServiceListenClient struct {
	grpc.ClientStream
}

func (x *asmServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *asmServiceClient) StopSidecar(ctx context.Context, in *StopSidecarRequest, opts ...grpc.CallOption) (*StopSidecarResponse, error) {
	out := new(StopSidecarResponse)
	err := c.cc.Invoke(ctx, "/v1.AsmService/StopSidecar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsmServiceServer is the server API for AsmService service.
// All implementations must embed UnimplementedAsmServiceServer
// for forward compatibility
type AsmServiceServer interface {
	// StartLocalSidecar starts a Service Sidecar on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the asm/config.yaml
	//   3. all bytes constituting the Sidecar YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalSidecar(AsmService_StartLocalSidecarServer) error
	// StartFromPreviousSidecar starts a new Sidecar based on a previous one.
	// If the previous Sidecar does not have the can-replay condition set this call will result in an error.
	StartFromPreviousSidecar(context.Context, *StartFromPreviousSidecarRequest) (*StartSidecarResponse, error)
	// StartSidecarRequest starts a new Sidecar based on its specification.
	StartSidecar(context.Context, *StartSidecarRequest) (*StartSidecarResponse, error)
	// Searches for Sidecar(s) known to this Sidecar
	ListSidecars(context.Context, *ListSidecarsRequest) (*ListSidecarsResponse, error)
	// Subscribe listens to new Sidecar(s) updates
	Subscribe(*SubscribeRequest, AsmService_SubscribeServer) error
	// GetSidecar retrieves details of a single Sidecar
	GetSidecar(context.Context, *GetSidecarRequest) (*GetSidecarResponse, error)
	// Listen listens to Sidecar updates and log output of a running Sidecar
	Listen(*ListenRequest, AsmService_ListenServer) error
	// StopSidecar stops a currently running Sidecar
	StopSidecar(context.Context, *StopSidecarRequest) (*StopSidecarResponse, error)
	mustEmbedUnimplementedAsmServiceServer()
}

// UnimplementedAsmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAsmServiceServer struct {
}

func (UnimplementedAsmServiceServer) StartLocalSidecar(AsmService_StartLocalSidecarServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalSidecar not implemented")
}
func (UnimplementedAsmServiceServer) StartFromPreviousSidecar(context.Context, *StartFromPreviousSidecarRequest) (*StartSidecarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousSidecar not implemented")
}
func (UnimplementedAsmServiceServer) StartSidecar(context.Context, *StartSidecarRequest) (*StartSidecarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSidecar not implemented")
}
func (UnimplementedAsmServiceServer) ListSidecars(context.Context, *ListSidecarsRequest) (*ListSidecarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSidecars not implemented")
}
func (UnimplementedAsmServiceServer) Subscribe(*SubscribeRequest, AsmService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAsmServiceServer) GetSidecar(context.Context, *GetSidecarRequest) (*GetSidecarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSidecar not implemented")
}
func (UnimplementedAsmServiceServer) Listen(*ListenRequest, AsmService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedAsmServiceServer) StopSidecar(context.Context, *StopSidecarRequest) (*StopSidecarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSidecar not implemented")
}
func (UnimplementedAsmServiceServer) mustEmbedUnimplementedAsmServiceServer() {}

// UnsafeAsmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsmServiceServer will
// result in compilation errors.
type UnsafeAsmServiceServer interface {
	mustEmbedUnimplementedAsmServiceServer()
}

func RegisterAsmServiceServer(s grpc.ServiceRegistrar, srv AsmServiceServer) {
	s.RegisterService(&AsmService_ServiceDesc, srv)
}

func _AsmService_StartLocalSidecar_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AsmServiceServer).StartLocalSidecar(&asmServiceStartLocalSidecarServer{stream})
}

type AsmService_StartLocalSidecarServer interface {
	SendAndClose(*StartSidecarResponse) error
	Recv() (*StartLocalSidecarRequest, error)
	grpc.ServerStream
}

type asmServiceStartLocalSidecarServer struct {
	grpc.ServerStream
}

func (x *asmServiceStartLocalSidecarServer) SendAndClose(m *StartSidecarResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *asmServiceStartLocalSidecarServer) Recv() (*StartLocalSidecarRequest, error) {
	m := new(StartLocalSidecarRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AsmService_StartFromPreviousSidecar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousSidecarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).StartFromPreviousSidecar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AsmService/StartFromPreviousSidecar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).StartFromPreviousSidecar(ctx, req.(*StartFromPreviousSidecarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_StartSidecar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSidecarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).StartSidecar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AsmService/StartSidecar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).StartSidecar(ctx, req.(*StartSidecarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_ListSidecars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSidecarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).ListSidecars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AsmService/ListSidecars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).ListSidecars(ctx, req.(*ListSidecarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AsmServiceServer).Subscribe(m, &asmServiceSubscribeServer{stream})
}

type AsmService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type asmServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *asmServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AsmService_GetSidecar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSidecarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).GetSidecar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AsmService/GetSidecar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).GetSidecar(ctx, req.(*GetSidecarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsmService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AsmServiceServer).Listen(m, &asmServiceListenServer{stream})
}

type AsmService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type asmServiceListenServer struct {
	grpc.ServerStream
}

func (x *asmServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AsmService_StopSidecar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSidecarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsmServiceServer).StopSidecar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AsmService/StopSidecar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsmServiceServer).StopSidecar(ctx, req.(*StopSidecarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AsmService_ServiceDesc is the grpc.ServiceDesc for AsmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AsmService",
	HandlerType: (*AsmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousSidecar",
			Handler:    _AsmService_StartFromPreviousSidecar_Handler,
		},
		{
			MethodName: "StartSidecar",
			Handler:    _AsmService_StartSidecar_Handler,
		},
		{
			MethodName: "ListSidecars",
			Handler:    _AsmService_ListSidecars_Handler,
		},
		{
			MethodName: "GetSidecar",
			Handler:    _AsmService_GetSidecar_Handler,
		},
		{
			MethodName: "StopSidecar",
			Handler:    _AsmService_StopSidecar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalSidecar",
			Handler:       _AsmService_StartLocalSidecar_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _AsmService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _AsmService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "asm.proto",
}
